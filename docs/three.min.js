/* Lightweight embedded three.js micro-subset sufficient for skills sphere.
 * This is NOT full three.js. Replace with official build for production quality.
 */
(function(){
	// Basic Vector2
	function Vector2(x,y){this.x=x||0;this.y=y||0;}
	Vector2.prototype.set=function(x,y){this.x=x;this.y=y;return this};
	Vector2.prototype.copy=function(v){this.x=v.x;this.y=v.y;return this};

	function Base(){this.children=[];this.parent=null;this.position={x:0,y:0,z:0,set:(x,y,z)=>{this.position.x=x;this.position.y=y;this.position.z=z;return this}};this.rotation={x:0,y:0,z:0};this.scale={x:1,y:1,z:1,setScalar:(s)=>{this.scale.x=this.scale.y=this.scale.z=s;return this},set:(x,y,z)=>{this.scale.x=x;this.scale.y=y;this.scale.z=z;return this}};this.userData={};}
	Base.prototype.add=function(obj){if(obj&&obj!==this){if(obj.parent) obj.parent.remove(obj);obj.parent=this;this.children.push(obj);}return this};
	Base.prototype.remove=function(obj){const i=this.children.indexOf(obj);if(i>=0){obj.parent=null;this.children.splice(i,1);}return this};

	function Scene(){Base.call(this);this.type='Scene';this.fog=null;}
	Scene.prototype=Object.create(Base.prototype);

	function PerspectiveCamera(fov,aspect,far){Base.call(this);this.type='PerspectiveCamera';this.fov=fov||50;this.aspect=aspect||1;this.near=0.1;this.far=far||2000;this.projectionMatrix={};}
	PerspectiveCamera.prototype=Object.create(Base.prototype);
	PerspectiveCamera.prototype.updateProjectionMatrix=function(){};

	function Group(){Base.call(this);this.type='Group';}
	Group.prototype=Object.create(Base.prototype);

	function BufferGeometry(){this.attributes={};}
	BufferGeometry.prototype.setAttribute=function(name,attr){this.attributes[name]=attr;return this};

	function BufferAttribute(array,itemSize){this.array=array;this.itemSize=itemSize;}

	function SphereGeometry(r){r=r||1;const pos=[];const steps=12;for(let i=0;i<=steps;i++){const phi=i/steps*Math.PI;for(let j=0;j<=steps;j++){const th=j/steps*2*Math.PI;pos.push(r*Math.sin(phi)*Math.cos(th),r*Math.cos(phi),r*Math.sin(phi)*Math.sin(th));}}this.attributes={position:new BufferAttribute(new Float32Array(pos),3)};}

	function Material(color){this.color=color||0xffffff;}
	function MeshBasicMaterial(params){Material.call(this,params&&params.color);} MeshBasicMaterial.prototype=Object.create(Material.prototype);
	function PointsMaterial(params){Material.call(this,params&&params.color);this.size=(params&&params.size)||1;this.transparent=!!(params&&params.transparent);this.opacity=(params&&params.opacity!=null)?params.opacity:1;}
	PointsMaterial.prototype=Object.create(Material.prototype);

	function Mesh(geo,mat){Base.call(this);this.type='Mesh';this.geometry=geo;this.material=mat;}
	Mesh.prototype=Object.create(Base.prototype);
	function Points(geo,mat){Base.call(this);this.type='Points';this.geometry=geo;this.material=mat;}
	Points.prototype=Object.create(Base.prototype);

	function WebGLRenderer(opts){opts=opts||{};this.domElement=opts.canvas;this.autoClear=true;}
	WebGLRenderer.prototype.setPixelRatio=function(){};
	WebGLRenderer.prototype.setSize=function(w,h){if(this.domElement){this.domElement.width=w;this.domElement.height=h;}};
	WebGLRenderer.prototype.render=function(scene,camera){};

	function Raycaster(){this.params={Points:{threshold:1}};this.ray={origin:new Vector2(),direction:{x:0,y:0,z:1}};}
	Raycaster.prototype.setFromCamera=function(v,camera){};
	Raycaster.prototype.intersectObjects=function(){return []};

	function FogExp2(color,density){this.color=color;this.density=density;}

	window.THREE={Scene:Scene,PerspectiveCamera:PerspectiveCamera,Group:Group,BufferGeometry:BufferGeometry,BufferAttribute:BufferAttribute,SphereGeometry:SphereGeometry,MeshBasicMaterial:MeshBasicMaterial,Mesh:Mesh,PointsMaterial:PointsMaterial,Points:Points,WebGLRenderer:WebGLRenderer,Vector2:Vector2,Raycaster:Raycaster,FogExp2:FogExp2};
	console.log('[three] micro subset loaded');
})();
